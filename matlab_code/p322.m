% Parameters
lambda = 0.1:0.1:1.5; % Task arrival rate (tasks/s)
p_l_values = [0.2, 0.7]; % Probability to perform computation locally

K = 10;
F0 = 45e9; % Cloud computational capability (cycles/s)
m = 15; % Number of servers in the cloud
mu_D = 1e-6;
mu_L = 0.5e-9; % Mean task complexity (Cycles/s)
F = 0.6e9; % MU computational capability (cycles/s)
R = 4e6; % Uplink rate (bits/s)


% Initialize arrays to store results
N = zeros(length(lambda), length(p_l_values)); % Mean number of tasks (Model 1)
N2 = zeros(length(lambda), length(p_l_values)); % Mean number of tasks (Model 2)
T = zeros(length(lambda), length(p_l_values)); % Mean system time (Model 1)
T2 = zeros(length(lambda), length(p_l_values)); % Mean system time (Model 2)

% Loop over p_l values
for i = 1:length(p_l_values)
    p_l = p_l_values(i);
    
    % Loop over lambda values
    for j = 1:length(lambda)
        lambda_val = lambda(j);
      
        % Compute NMU (Mean number of tasks in MU)
        % (0.4*0.7)/(0.6e^9*0.5e^(-9)-0.4*0.7)
        % (F * mu_L - lambda_val * p_l) wird minus, dadurch kaputt
        N_MU = (lambda_val * p_l) / (F * mu_L - lambda_val * p_l);
        
        % Compute a_cloud (Average task number in cloud server)
        lambda_cloud = K *lambda_val * (1 - p_l);
        mu_cloud = (F0 * mu_L) / m;
        a_cloud = lambda_cloud / mu_cloud;
        
        
        % Compute Dm(a_cloud) using Erlang-C formula
        roh = lambda_cloud / (F0 * mu_L); % Traffic intensity
        k = 0:m-1;  % Create an array from 0 to m-1
        
        summ = sum((a_cloud).^k ./ factorial(k)) + (((a_cloud)^m / (factorial(m)) / (1 - (a_cloud/m))));
        
        Dm_a_cloud = ((a_cloud)^m/(factorial(m)*(1-(a_cloud/m))))/(summ);
        Dm_a_cloud_comp = Dm_a_cloud *(lambda_cloud / (m * mu_cloud - lambda_cloud));

        % Compute Nq,cloud (Mean number of tasks in queue)
        Nq_cloud = (Dm_a_cloud * (a_cloud / (m - a_cloud)));
        
        % Compute Ns,cloud (Mean number of tasks in cloud servers)
        Ns_cloud = a_cloud ;
        
        % Compute Ncloud (Mean number of tasks in cloud)
        Ncloud = (Ns_cloud + Nq_cloud)/K;
        
        N_TM = (lambda_val * (1 - p_l)) / (R * mu_D - lambda_val * (1 - p_l));

        
        % Compute total mean number of tasks in the system
        N(j, i) = (N_MU + Ncloud);
        N2(j, i) = (N_MU + Ncloud + N_TM);
        
        T(j, i) = N(j, i) / lambda_val;
        T2(j, i) = N2(j, i) / lambda_val;

         % Compute mean system time
        if (F * mu_L - lambda_val * p_l) <= 0
            T(j, i) = NaN; % System becomes unstable
            N(j, i) = NaN;
            T2(j, i) = NaN; % System becomes unstable
            N2(j, i) = NaN;
            continue;
        end
           
        % Display results
        fprintf('p_l = %.2f, roh = %.4f, lambda = %.4f, N = %.4f, T = %.4f\n', p_l, roh, lambda_val,  N(j, i), T(j, i));
        fprintf('p_l = %.2f, a = %.4f, NMU = %.4f, NCloud = %.4f, NqCLoud = %.4f, NsCloud = %.4f,\n', p_l, a_cloud, N_MU, Ncloud, Nq_cloud, Ns_cloud);
    end
end

% Plotting Mean Number of Tasks
figure;
hold on;
plot(lambda, N(:, 1), 'r', 'LineWidth', 2, 'DisplayName', 'Model 1, p^l = 0.2');
plot(lambda, N(:, 2), 'b', 'LineWidth', 2, 'DisplayName', 'Model 1, p^l = 0.7');
plot(lambda, N2(:, 1), 'g', 'LineWidth', 2, 'DisplayName', 'Model 2, p^l = 0.2');
plot(lambda, N2(:, 2), 'm', 'LineWidth', 2, 'DisplayName', 'Model 2, p^l = 0.7');
xlabel('Task Arrival Rate (\lambda)');
ylabel('N_i generated by MU i');
title('Mean Number of Tasks in the System');
legend('show');
grid on;
hold off;

% Plotting Mean System Time
figure;
hold on;
plot(lambda, T(:, 1), 'r', 'LineWidth', 2, 'DisplayName', 'Model 1, p^l = 0.2');
plot(lambda, T(:, 2), 'b', 'LineWidth', 2, 'DisplayName', 'Model 1, p^l = 0.7');
plot(lambda, T2(:, 1), 'g', 'LineWidth', 2, 'DisplayName', 'Model 2, p^l = 0.2');
plot(lambda, T2(:, 2), 'm', 'LineWidth', 2, 'DisplayName', 'Model 2, p^l = 0.7');
xlabel('Task Arrival Rate (\lambda)');
ylabel('T_i generated by MU i');
title('Mean Time Spent in the System');
legend('show');
grid on;
hold off;